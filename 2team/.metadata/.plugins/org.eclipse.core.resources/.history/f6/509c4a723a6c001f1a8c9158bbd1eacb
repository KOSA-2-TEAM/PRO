package com.example._team.service;

import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example._team.domain.TravelBoard;
import com.example._team.dto.SuccessResponseDto;
import com.example._team.dto.TravelBoardRequestsDto;
import com.example._team.dto.TravelBoardResponseDto;
import com.example._team.repository.TravelBoardRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TravelBoardService {
    
    private final TravelBoardRepository travelBoardRepository;
    
    public List<TravelBoardResponseDto> getPosts() {
        return travelBoardRepository.findAllByOrderByModifiedAtDesc().stream()
                .map(TravelBoardResponseDto::new)
                .toList();
    }
    
    public TravelBoardResponseDto createPost(TravelBoardRequestsDto requestsDto) {
        TravelBoard travelBoard = new TravelBoard();
        travelBoard.setTitle(requestsDto.getTitle());
        travelBoard.setContent(requestsDto.getContent());
        travelBoard.setRegion(requestsDto.getRegion());
        travelBoard.setStatDate(requestsDto.getStatDate());
        travelBoard.setEndDate(requestsDto.getEndDate());
        travelBoard.setIsPublic(requestsDto.getIsPublic());
        travelBoard.setUserIdx(requestsDto.getUserIdx());
        
        travelBoardRepository.save(travelBoard);
        return new TravelBoardResponseDto(travelBoard);
    }
    
    @Transactional
    public TravelBoardResponseDto getPost(Integer travelIdx) {
        TravelBoard travelBoard = travelBoardRepository.findById(travelIdx)
                .orElseThrow(() -> new IllegalArgumentException("해당 게시글이 존재하지 않습니다."));
        return new TravelBoardResponseDto(travelBoard);
    }
    
    @Transactional
    public TravelBoardResponseDto updatePost(Integer travelIdx, TravelBoardRequestsDto requestsDto) throws Exception {
        TravelBoard travelBoard = travelBoardRepository.findById(travelIdx)
                .orElseThrow(() -> new IllegalAccessError("해당 게시글이 존재하지 않습니다."));
        
        travelBoard.setTitle(requestsDto.getTitle());
        travelBoard.setContent(requestsDto.getContent());
        travelBoard.setRegion(requestsDto.getRegion());
        travelBoard.setStatDate(requestsDto.getStatDate());
        travelBoard.setEndDate(requestsDto.getEndDate());
        travelBoard.setIsPublic(requestsDto.getIsPublic());
        
        return new TravelBoardResponseDto(travelBoard);
    }
    
    @Transactional
    public SuccessResponseDto deletePost(Integer travelIdx) throws Exception {
        TravelBoard travelBoard = travelBoardRepository.findById(travelIdx)
                .orElseThrow(() -> new IllegalAccessError("해당 게시글이 존재하지 않습니다."));
        
        travelBoardRepository.delete(travelBoard);
        return new SuccessResponseDto(true);
    }
}






//package com.example._team.service;
//
//import java.util.List;
//
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import com.example._team.domain.TravelBoard;
//import com.example._team.dto.SuccessResponseDto;
//import com.example._team.dto.TravelBoardRequestsDto;
//import com.example._team.dto.TravelBoardResponseDto;
//import com.example._team.repository.TravelBoardRepository;
//
//import lombok.RequiredArgsConstructor;
//
//@Service
//@RequiredArgsConstructor
//public class TravelBoardService {
//	
//	private final TravelBoardRepository travelBoardRepository;
//	
//	
//	public List<TravelBoardResponseDto> getPosts() {
//		return travelBoardRepository.findAllByOrderByModifiedAtDesc().stream().map(TravelBoardResponseDto::new).toList();
//	}
//	
//	public TravelBoardResponseDto createPost(TravelBoardRequestsDto requestsDto) {
//		TravelBoard travelboard = new TravelBoard();
//		travelboard.setContent(requestsDto.getContent());
//		
//		travelBoardRepository.save(travelboard);
//		return new TravelBoardResponseDto(travelboard);
//	}
//	
//	@Transactional
//	public TravelBoardResponseDto getPost(Integer userIdx) {
//		return travelBoardRepository.findById(userIdx).map(TravelBoardResponseDto::new).orElseThrow(
//				() -> new IllegalArgumentException("아이디가 존재하지 않습니다.")
//		);
//	}
//	
//	@Transactional
//	public TravelBoardResponseDto updatePost(Integer userIdx, TravelBoardRequestsDto requestsDto) throws Exception {
//		TravelBoard travelboard = travelBoardRepository.findById(userIdx).orElseThrow(
//				() -> new IllegalAccessError("아이디가 존재하지 않습니다.")
//		);
////		if (!requestsDto.get().equals(users.get))
//		
////		travelboard.update(requestsDto);
//		return new TravelBoardResponseDto(travelboard);	
//	}
//	
//	@Transactional
//	public SuccessResponseDto deletePost(Integer userIdx, TravelBoardRequestsDto requestsDto) throws Exception {
//		TravelBoard travelboard = travelBoardRepository.findById(userIdx).orElseThrow(
//				() -> new IllegalAccessError("아이디가 존재하지 않습니다.")
//		);
//		
//		return new SuccessResponseDto(true);
//	}
//
//}
